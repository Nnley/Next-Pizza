generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  fullName String    @map("full_name")
  email    String    @unique
  password String
  role     UserRole  @default(USER)
  verified DateTime?

  provider   String?
  providerId String? @map("provider_id")

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String @map("image_url")

  ingredients Ingredient[]
  variations  ProductVariation[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products")
}

model ProductVariation {
  id Int @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType Int? @map("pizza_type")

  cartItems CartItem[]

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_variations")
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String @map("image_url")

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ingredients")
}

model Cart {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique @map("user_id")

  items CartItem[]

  token String

  totalAmount Int @default(0) @map("total_amount")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("carts")
}

model CartItem {
  id Int @id @default(autoincrement())

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int  @map("cart_id")

  productVariation   ProductVariation @relation(fields: [productVariationId], references: [id])
  productVariationId Int              @map("product_variation_id")

  quantity Int @default(1)

  ingredients Ingredient[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cart_items")
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  token String

  totalAmount Int         @map("total_amount")
  status      OrderStatus
  paymentId   String?     @map("payment_id")

  items Json

  fullName String  @map("full_name")
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  code String

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, code])
  @@map("verification_codes")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum UserRole {
  USER
  ADMIN
}
